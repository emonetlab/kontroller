{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Thr",
				"ThrustSurges"
			],
			[
				"Puls",
				"PulseOn"
			],
			[
				"outpu",
				"output"
			],
			[
				"plot",
				"plotthese"
			],
			[
				"Thrust",
				"ThrustSurges"
			],
			[
				"WBF",
				"WBFsurges"
			],
			[
				"output",
				"outputnames"
			],
			[
				"out",
				"outputnames"
			],
			[
				"Air",
				"Airspeed"
			],
			[
				"Airsp",
				"Airspeed"
			],
			[
				"Foudn",
				"FoundFilesCallback"
			],
			[
				"axes",
				"axesHandles"
			],
			[
				"Font",
				"FontSize"
			],
			[
				"Control",
				"ControlParadigm"
			],
			[
				"X",
				"XLim"
			],
			[
				"Valve",
				"ValveSignal"
			],
			[
				"Shelf",
				"ShelfFilesList"
			],
			[
				"XTick",
				"XTickLabel"
			],
			[
				"Odour",
				"OdourDuration"
			],
			[
				"File",
				"FileName2GenoDate"
			],
			[
				"V",
				"Valve"
			],
			[
				"Th",
				"Thrusto"
			],
			[
				"Cluster",
				"ClusterDataButton"
			],
			[
				"Thru",
				"Thrustc"
			],
			[
				"THR",
				"Thrusto"
			],
			[
				"WB",
				"WBFc"
			],
			[
				"Tri",
				"TrialVariabilityCallback"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"background",
				"background	background: color image repeat attachment position"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "% Kontroller.m\n% created by  <a href=\"http://srinivas.gs/\">srinivas.gs</a>\n% contact me at kontroller@srinivas.gs\n% Kontroller is at https://sourceforge.net/projects/daqkontroller/\n% Kontroller is in the public domain. If you do use Kontroller for a\n% substantial project, do let me know at kontroller@srinivas.gs\n%\n% ===How to use Kontroller===\n%\n% 1. run Kontroller by typing \"Kontroller\"\n% 2. Kontroller will automatically detect NI hardware and determine\n% which channels you can use\n% 3. Click on \"configure inputs\". To configure analogue inputs, call\n% the channel you want to use something in the text field. Specify the input range as a number in\n% the smaller edit field\n% (default is +/-10V)\n% 4. Click on \"configure outputs\".If you want to use an output channel, call\n% it something in the text field. Analogue on left, digital on right.\n% 5. click on \"configure controls\". you should have vectors corresponding\n% to the control singals you want to write in your workspace. choose which\n% vector is written to which channel. Call the entire set with a certain\n% name, and click \"DONE\". Close the window if you're done adding control\n% paradigms. \n% 6. Set an appropriate sampling rate. default is 1kHz. \n% 7. Choose the file you want to output data to. Data will be stored as a\n% .mat file\n% 8. Choose the input channels you want to look at, and press \"start\n% scopes\" to look at your input live. \n% 9. If you want to run a trial, choose a control paradigm from the paradigm list\n% and press \"run\"\n% 10. Kontroller will save all data as .mat files in c:\\data\\\n% \n% === dependencies===\n% \n% Kontroller will check for dependencies on every run. If something is not met, it won't run\n% 1. MATLAB 2013a (older versions have a bug which prevent digital channels\n% from working well)\n% 2. The DAQ toolbox\n% 3. strkat.m, which is available with this file.\n% 4. oval.m\n%\n%\n% === changelog ===\n%\n% v0.3.0--added metadata option.\n% v0.3.1--cosmetic and UI changes\n% v0.3.2--bug fix: trial numbers now reset when file is changed.\n% v0.3.3--bug fixes\n% v0.3.4--Kontroller now logs OutputChannelNames and sampling rate.\n% v0.3.5--GUI for digital outputs\n% v0.3.6--reorganised variables; internal housekeeping \n% v0.3.7--full support for digital outputs. needs MATLAB R2013a\n% v0.3.8--run trial intialisation and data agglomeration split into two\n% functions\n% v0.3.9--run trial now uses a background task--gone back to foreground\n% task in 0.4.1\n% v0.4.0--added a check to make sure that MATLAB dependencies are met\n% v0.4.1--fixed a bug where RunProgram() would not wait for background task\n% to finish. also, gone back to foreground task because background task had\n% issues with releasing session resources\n% v0.4.2--added the ability to pause a programme\n% v0.4.3--added a check to make sure that loaded control paradigms match the configured output channels\n% v0.4.4--added the ability to view a paradigm\n% v0.4.5--fixed a bug where only a digital channel prevented control\n% configuration, and where digital channels would not show in paradigm\n% displays\n% v0.4.6--fixed a bug where more than one digital output channel would not display correctly on control config screen \n% v0.4.7--Kontroller can now loop over a selected subset of control\n% paradigms\n% v0.4.8--1) fixed a bug where multiple digital output controls would not\n% display correctly. 2) Kontroller now attempts to close all windows it\n% creates\n% v0.4.9--fixed a bug where saved paradigms would not load correctly if\n% digital output channels were being used.\n% v0.5.0--added a feature where input channels marked \"Ground\" will be used\n% as ground, and will not be recorded from. helps with eliminating ghosting/channel\n% cross-talk\n% v0.5.1--added a feature where destination file names can be directly edited\n% and removed, and trials can be run without logging data\n% v0.5.2--fixed a bug where output channel names were scrambled in file.\n% v0.5.3--date, time, Kontroller version, and NI board saved to metadata\n% automatically\n% v0.5.4--fixed a bug where Control Paradigms would not display propoerly\n% if there were an odd number of outputs. \n% v0.5.5--logs a timestamp of every trial. \n% v0.5.6--Kontroller now remembers programme selection, and re-selects the\n% chosen paradigms when paradigm finishes running\n% v0.5.7--Kontroller now remembers input channel ranges. \n% v0.5.8 -- Kontroller now estimates time to completion of programme\n% v0.5.9 -- Kontroller can now delete paradigms\n% v0.6.0 -- Added code to caluclaute Epochs based on digital outputs,\n% useful for colour coding traces as they are acquired. (that still has to\n% be written)\n% v0.6.1 -- added code to recover from reserved hardware error\n% v0.6.2 -- added the ability to run Kontroller from the commandline.\n% Kontroller can be called from another function, and will run the\n% specified number of trials and return the data recorded. \n% v0.6.3--adds support for running paradigms in sequence, one paradigm at a\n% time. \n% v0.6.4 -- adds support for running programs consisting of arbitrary\n% sequences of paradigms\n%\n% ===Help, bug reports, contact and suggestions===\n% \n% you should write to me at kontroller@srinivas.gs\n%\n\n\nfunction [data] = Kontroller(gui,ControlParadigm,RunTheseParadigms,w)\nVersionName= 'Kontroller v0.6.5';\n%% check for MATLAB dependencies\nv = ver;\nv = struct2cell(v);\n[~,j]=ind2sub(size(v), strmatch('Data Acquisition Toolbox', v, 'exact'));\nif ~isempty(j)\n    % check version of release\n    if str2double(v{2,:,j}) < 3.3\n        % version not supported\n        error('Kontroller needs version 3.3 or better of the <a href=\"http://www.mathworks.com/products/daq/\">DAQ toolbox</a> to run, which was not detected.')\n    end\nelse\n    % No DAQ toolbox\n    error('Kontroller needs the <a href=\"http://www.mathworks.com/products/daq/\">DAQ toolbox</a> to run, which was not detected.')\nend\n% check for strkat\ntry\n    strkat('Checking for ','strkat.m..');\ncatch\n    error('Kontroller needs <a href=\"https://sourceforge.net/projects/daqkontroller/\">strkat.m</a> to run, which was not detected.')\n\nend\n\n% check if data directory exists\nif exist('c:\\data\\','dir') == 7\nelse\n    if gui\n        disp('Kontroller will default to storing recorded data in c:\\data. This directory will now be created...')\n    end\n    mkdir('c:\\data\\')\nend\n%% validate inputs\nif nargin == 0 \n    % fine.\n    gui = 1; % default to showing the GUI\nelseif nargin < 3\n    error('Not enough input arguments. If you are trying to run Kontroller from the command line, you need three inputs')\nelse\n   if isstruct(ControlParadigm) == 0 \n       error('ControlParadigm is not a structure.')\n   end\nend\n%% persistent internal variables\n \n% session handles\ns=[]; % this is the session ID\n\n% listeners\nlh = []; % generic listener ID\nlhMC = []; % listener for manual control\n\n%  figure handles\nf1 = []; f2=[]; f3 = []; f4 = [];\nfcs=[];\nmef = []; % figure for metadata editor\nViewParadigmFig = [];\n\n% uicontrol handles\nli = []; ri = []; lir = []; rir= [ ]; % analogue input handles\nlo = []; ro = [];  % analogue outputs handles\ndlo = []; dro = []; % digital outputs handles\nMetadataTextControl= []; % handle for metadata control\nMetadataTextDisplay = []; % handle for metadata display\nScopeHandles = [];\nControlHandles= [];\nParadigmNameUI = [];\nMCoi = []; \nMCNumoi = []; % this is for manually entering a specific set point via a edit field\n\n% internal control variables\nMCOutputData = [];\nmetadatatext = []; % stores metadata in a cell array so that we can display it.\nScopeThese = [];\nscopes_running = 0; % are the scopes running right now?\ntrial_running = 0; % when nonzero, this is the number of scans left. when zero, this means it's done\nsequence = []; % this stores the sequence of trials to be done in this programme\nsequence_step = []; % stores where in the sequence the programme is\nprogramme_running = [];\npause_programme = 0;\nif nargin < 2\n    ControlParadigm = []; % stores the actual control signals for the different control paradigm\nend\n% internal data variables\nthisdata = []; % stores data from current trial; needs to be combined with data\ndata = [];\nscope_plot_data = [];\nVarNames = [];\nSaveToFile= [];\nTrials = []; % this keeps track of how many trials have been done with each paradigm\nmetadata = [];  % stores metadata associated with the whole file. \ntimestamps = []; % first column stores the paradigm #, the second the trial #, and the third the timestamp\nEpochs = [];\nCustomSequence = [];\nif nargin < 3\n    w = 1000; % 1kHz sampling  \nend\n\n%% initlaise some metadata\nmetadata.DateTime = datestr(now);\nd = daq.getDevices;\nmetadata.daqName = d.Model;\nmetadata.KontrollerVersion = VersionName;\nmetadata.ComputerName = getenv('COMPUTERNAME');\nfn = fieldnames(metadata);\nfor i = 1:length(fn)\n    metadatatext{i} = strcat(fn{i},' : ',mat2str(getfield(metadata,fn{i}))); %#ok<AGROW>\nend\nset(MetadataTextDisplay,'String',metadatatext);\nset(MetadataTextControl,'String','');\n\n%% make the GUI\nif gui\n    clc\n    wh = waitbar(0.1,'Kontroller is starting...');\n    f1 = figure('Position',[20 60 450 700],'Toolbar','none','Menubar','none','Name',VersionName,'NumberTitle','off','Resize','off','HandleVisibility','on','CloseRequestFcn',@QuitKontrollerCallback);\n    waitbar(0.2,wh,'Generating UI...'); figure(wh)\n    Konsole = uicontrol('Position',[15 600 425 90],'Style','text','String','Kontroller is starting...','FontName','Courier','HorizontalAlignment','left');\n    ConfigureInputChannelButton = uicontrol('Position',[15 540 140 50],'Style','pushbutton','Enable','off','String','Configure Inputs','FontSize',10,'Callback',@ConfigureInputChannels);\n    ConfigureOutputChannelButton = uicontrol('Position',[160 540 140 50],'Style','pushbutton','Enable','off','String','Configure Outputs','FontSize',10,'Callback',@ConfigureOutputChannels);\n    ConfigureControlSignalsButton = uicontrol('Position',[305 540 140 50],'Style','pushbutton','Enable','off','String','Configure Control','FontSize',10,'Callback',@ConfigureControlSignals);\n    InputChannelsPanel = uipanel('Title','Input Channels','FontSize',12,'units','pixels','pos',[15 330 240 200]);\n    PlotInputsList = {};\n    PlotOutputsList = {};\n    PlotInputs = uicontrol(InputChannelsPanel,'Position',[3 3 230 170],'Style','listbox','Min',0,'Max',2,'String',PlotInputsList,'FontSize',11);\n    OutputChannelsPanel = uipanel('Title','Output Channels','FontSize',12,'units','pixels','pos',[265 330 170 130]);\n    PlotOutputs = uicontrol(OutputChannelsPanel,'Position',[3 3 165 100],'Style','listbox','Min',0,'Max',2,'String',PlotOutputsList,'FontSize',11);\n\n    % paradigm panel\n    ControlParadigmList = {}; % stores a list of different control paradigm names. e.g., control, test, odour1, etc.\n    ParadigmPanel = uipanel('Title','Control Paradigms','FontSize',12,'units','pixels','pos',[15 30 170 180]);\n    ParadigmListDisplay = uicontrol(ParadigmPanel,'Position',[3 3 155 105],'Style','listbox','Enable','on','String',ControlParadigmList,'FontSize',12,'Min',0,'Max',2,'Callback',@ControlParadigmListCallback);\n    SaveControlParadigmsButton = uicontrol(ParadigmPanel,'Position',[3,120,45,30],'Style','pushbutton','String','Save','Callback',@SaveControlParadigms);\n    ViewControlParadigmButton = uicontrol(ParadigmPanel,'Position',[52,120,45,30],'Style','pushbutton','String','View','Callback',@ViewControlParadigm);\n    RemoveControlParadigmsButton = uicontrol(ParadigmPanel,'Position',[100,120,60,30],'Style','pushbutton','String','Remove','Callback',@RemoveControlParadigms);\n\n\n    SamplingRateControl = uicontrol(f1,'Position',[133 5 50 20],'Style','edit','String','1000');\n    uicontrol(f1,'Position',[20 5 100 20],'Style','text','String','Sampling Rate');\n    RunTrialButton = uicontrol(f1,'Position',[320 5 110 50],'Enable','off','BackgroundColor',[0.8 0.9 0.8],'Style','pushbutton','String','RUN w/o saving','FontWeight','bold','Callback',@RunTrial);\n\n    FileNameDisplay = uicontrol(f1,'Position',[200,60,230,50],'Style','edit','String','No destination file selected','Callback',@SaveToFileTextEdit);\n    FileNameSelect = uicontrol(f1,'Position',[200,5,100,50],'Style','pushbutton','String','Write to...','Callback',@SelectDestinationCallback);\n\n    AutomatePanel = uipanel('Title','Automate','FontSize',12,'units','pixels','pos',[205 120 230 200]);\n    uicontrol(AutomatePanel,'Style','text','FontSize',8,'String','Repeat selected paradigms','Position',[1 120 100 50])\n    uicontrol(AutomatePanel,'Style','text','FontSize',8,'String','times','Position',[150 110 50 50])\n    RepeatNTimesControl = uicontrol(AutomatePanel,'Style','edit','FontSize',8,'String','1','Position',[110 140 30 30]);\n    RunProgramButton = uicontrol(AutomatePanel,'Position',[4 5 110 30],'Enable','off','Style','pushbutton','String','RUN PROGRAM','Callback',@RunProgram);\n    PauseProgramButton = uicontrol(AutomatePanel,'Position',[124 5 80 30],'Enable','off','Style','togglebutton','String','PAUSE','Callback',@PauseProgram);\n\n    uicontrol(AutomatePanel,'Style','text','FontSize',8,'String','Do this between trials:','Position',[1 70 100 50])\n    InterTrialIntervalControl = uicontrol(AutomatePanel,'Style','edit','FontSize',8,'String','pause(20)','Position',[110 100 100 30]);\n    RandomizeControl = uicontrol(AutomatePanel,'Style','popupmenu','String',{'Randomise','Interleave','Block','Reverse Block','Custom'},'Value',2,'FontSize',8,'Position',[5 50 100 20],'Callback',@RandomiseControlCallback);\n\n\n    ManualControlButton = uicontrol(f1,'Position',[10 230 170 30],'Enable','on','Style','pushbutton','String','Manual Control','Callback',@ManualControlCallback);\n    MetadataButton = uicontrol(f1,'Position',[10 270 170 30],'Enable','on','Style','pushbutton','String','Add Metadata...','Callback',@MetadataCallback);\n\n    waitbar(0.3,wh,'Generating global variables...'); figure(wh)\n    StartScopes = uicontrol(f1,'Position',[260 465 150 50],'Style','pushbutton','Enable','off','String','Start Scopes','FontSize',12,'Callback',@ScopeCallback);\n    scope_fig = figure('Position',[500 150 750 650],'Toolbar','none','Name','Oscilloscope','NumberTitle','off','Resize','on','Visible','off','CloseRequestFcn',@QuitKontrollerCallback); hold on; \n\nend\n\n%% figure out DAQ characteristics and initialise\n\nif gui\n    waitbar(0.5,wh,'Scanning hardware...'); figure(wh)\nelse\n    disp('Scanning hardware...')\nend\nd = daq.getDevices(); % this line takes a long time when you rin it for the first time...\nif gui\n    figure(wh)\nend\n\nOutputChannels =  d.Subsystems(2).ChannelNames;\nnOutputChannels = length(OutputChannels);\nInputChannels =  d.Subsystems(1).ChannelNames;\nnInputChannels = length(InputChannels);\nInputChannelRanges = 10*ones(1,nInputChannels);\nDigitalOutputChannels=d.Subsystems(3).ChannelNames;\nnDigitalOutputChannels = length(DigitalOutputChannels);\nUsedInputChannels = [];\nInputChannelNames = {}; % this is the user defined names\nUsedDigitalOutputChannels = [];\nDigitalOutputChannelNames = {}; % this is the user defined names\nUsedOutputChannels = [];\nOutputChannelNames = {}; % this is the user defined names\n\nif gui\n    waitbar(0.6,wh,'Checking for input config...'); figure(wh)\nend\n% load saved configs...inputs\nif ~isempty(dir('Kontroller.Config.Input.mat'))\n    \n    load('Kontroller.Config.Input.mat','UsedInputChannels','InputChannelNames','InputChannelRanges')\n    if gui\n        disp('Loading saved input config files...')\n        PlotInputsList = InputChannelNames(UsedInputChannels);\n         set(PlotInputs,'String',PlotInputsList)\n         if ~isempty(UsedInputChannels)\n             set(StartScopes,'Enable','on')\n         else \n             set(StartScopes,'Enable','off')\n         end\n         disp('DONE')\n    end\n    \nend\nif gui\n    waitbar(0.7,wh,'Checking for output config...'); figure(wh)\nend\n% load saved configs..outputs\nif gui\n    set(ConfigureControlSignalsButton,'Enable','off')\nend\nif ~isempty(dir('Kontroller.Config.Output.mat'))\n    \n    load('Kontroller.Config.Output.mat','UsedOutputChannels','OutputChannelNames')\n    if gui\n        disp('Loading saved output config files...')\n         if ~isempty(UsedOutputChannels)\n             set(ConfigureControlSignalsButton,'Enable','on')\n         end\n         % update PlotOutputsList\n         PlotOutputsList = [OutputChannelNames(UsedOutputChannels) DigitalOutputChannelNames(UsedDigitalOutputChannels)];\n         set(PlotOutputs,'String',PlotOutputsList);\n        disp('DONE')\n    end\n     \nend\n% load saved digital output configs\nif ~isempty(dir('Kontroller.Config.Output.Digital.mat'))\n    \n    load('Kontroller.Config.Output.Digital.mat','UsedDigitalOutputChannels','DigitalOutputChannelNames')\n    if gui\n        disp('Loading saved output config files...')\n         if ~isempty(UsedDigitalOutputChannels)\n             set(ConfigureControlSignalsButton,'Enable','on')        \n         end\n         % update PlotOutputsList\n         PlotOutputsList = [OutputChannelNames(UsedOutputChannels) DigitalOutputChannelNames(UsedDigitalOutputChannels)];\n         set(PlotOutputs,'String',PlotOutputsList);\n        disp('DONE')\n    end\n    \nend\nif gui\n    waitbar(1,wh,'DONE.'); figure(wh)\n    set(ConfigureInputChannelButton,'Enable','on')\n    set(ConfigureOutputChannelButton,'Enable','on')\n    set(Konsole,'String',strkat('Kontroller is ready to use. \\n','Hardware detected: \\n',d.Vendor.FullName,'-',d.Model))\n    close(wh)\n    set(scope_fig,'Visible','on')\nend\n\n%% the following section applies only when Kontroller is run in non-interactive mode.\nif ~gui\n    disp('Kontroller is starting from the command line...')\n    for gi = 1:length(RunTheseParadigms)\n        % prep the data acqusition session\n        clear s\n        s = daq.createSession('ni');\n        % figure out T\n        T = length(ControlParadigm(RunTheseParadigms(gi)).Outputs)/w;\n        s.DurationInSeconds = T;\n        s.Rate = w; % sampling rate, user defined.\n        % add the analogue input channels\n        TheseChannels=InputChannels(UsedInputChannels);\n        for ii = 1:length(TheseChannels)\n            s.addAnalogInputChannel('Dev1',InputChannels{UsedInputChannels(ii)}, 'Voltage');\n        end\n        % add the analogue output channels\n        TheseChannels=OutputChannels(UsedOutputChannels);\n        for ii = 1:length(TheseChannels)\n             s.addAnalogOutputChannel('Dev1',OutputChannels{UsedOutputChannels(ii)}, 'Voltage');\n        end\n        % add the digital output channels\n        TheseChannels=DigitalOutputChannels(UsedDigitalOutputChannels);\n        for ii = 1:length(TheseChannels)\n             s.addDigitalChannel('Dev1',DigitalOutputChannels{UsedDigitalOutputChannels(ii)}, 'OutputOnly');\n        end\n        \n        % queue data        \n        s.queueOutputData(ControlParadigm(RunTheseParadigms(gi)).Outputs');\n        \n        % configure listener to plot data on the scopes \n        lh = s.addlistener('DataAvailable',@PlotCallback);\n        scope_plot_data = NaN(length(UsedInputChannels),T*w);\n        \n        % run trial\n        disp('Running trial...')\n        \n        \n        s.startForeground();\n        disp('DONE')\n        \n        ThisParadigm = RunTheseParadigms(gi);\n        ProcessTrialData;\n        \n    end\nend\n\n%% configure inputs\n    function [] =ConfigureInputChannels(eo,ed)\n        % load saved configs      \n        n = nInputChannels;\n        Height = 600;\n        f2 = figure('Position',[80 80 450 Height+50],'Toolbar','none','Menubar','none','resize','off','Name','Configure Analogue Input Channels','NumberTitle','off');\n        uicontrol(f2,'Position',[25 600 400 40],'style','text','String','To reduce channel cross-talk, label shorted channels as \"Ground\". These will not be recorded from.','FontSize',8);\n        a = axes; hold on\n        set(a,'Visible','off');\n        if floor(n/2)*2 == n\n            % even n\n            nspacing = Height/(n/2);\n            % generate UIcontrol edit boxes\n            for i = 1:n/2  % left side\n                if ismember(i,UsedInputChannels)\n                    li(i) = uicontrol(f2,'Position',[40 10+Height-i*nspacing 100 20],'Style', 'edit','String',InputChannelNames{i},'FontSize',12,'Callback',@InputConfigCallback);\n                    lir(i) = uicontrol(f2,'Position',[7 10+Height-i*nspacing 25 20],'Style', 'edit','String',mat2str(InputChannelRanges(i)),'FontSize',10,'Callback',@InputConfigCallback);\n                    % check if it is a ground channel\n                      if strmatch(get(li(i),'String'),'Ground')\n                          set(li(i),'ForegroundColor','g')\n                      else\n                          set(li(i),'ForegroundColor','k')\n                      end\n                else\n                    li(i) = uicontrol(f2,'Position',[40 10+Height-i*nspacing 100 20],'Style', 'edit','FontSize',12,'Callback',@InputConfigCallback);\n                    lir(i) = uicontrol(f2,'Position',[7 10+Height-i*nspacing 25 20],'Style', 'edit','String',mat2str(InputChannelRanges(i)),'FontSize',10,'Callback',@InputConfigCallback);\n                end\n                uicontrol(f2,'Position',[160 10+Height-i*nspacing 50 20],'Style', 'text','String',InputChannels{i},'FontSize',12);\n            end\n            for i = 1:n/2  % right side\n                if ismember(n/2+i,UsedInputChannels)\n                    ri(i) = uicontrol(f2,'Position',[300 10+Height-i*nspacing 100 20],'Style', 'edit','String',InputChannelNames{n/2+i},'FontSize',12,'Callback',@InputConfigCallback);\n                    rir(i) = uicontrol(f2,'Position',[407 10+Height-i*nspacing 25 20],'Style', 'edit','String',mat2str(InputChannelRanges(n/2+i)),'FontSize',10,'Callback',@InputConfigCallback);\n                    % check if it is a ground channel\n                      if strmatch(get(ri(i),'String'),'Ground')\n                          set(ri(i),'ForegroundColor','g')\n                      else\n                          set(ri(i),'ForegroundColor','k')\n                      end\n                else\n                    ri(i) = uicontrol(f2,'Position',[300 10+Height-i*nspacing 100 20],'Style', 'edit','FontSize',12,'Callback',@InputConfigCallback);\n                    rir(i) = uicontrol(f2,'Position',[407 10+Height-i*nspacing 25 20],'Style', 'edit','String',mat2str(InputChannelRanges(n/2+i)),'FontSize',10,'Callback',@InputConfigCallback);\n                end\n                uicontrol(f2,'Position',[220 10+Height-i*nspacing 50 20],'Style', 'text','String',InputChannels{n/2+i},'FontSize',12);\n            end\n            \n        else\n            error('Odd number of channels, cannot handle this')\n        end\n    \n    end\n\n%% configure outputs\n    function [] =ConfigureOutputChannels(eo,ed)\n        % make the analogue outputs\n        n = nOutputChannels;\n        Height = 300;\n        f3 = figure('Position',[50 150 450 Height],'Toolbar','none','Menubar','none','Name','Configure Analogue Output Channels','NumberTitle','off','CloseRequestFcn',@QuitConfigOutputsCallback);\n        a = axes; hold on\n        set(a,'Visible','off');\n        if floor(n/2)*2 == n\n            % even n\n            nspacing = Height/(n/2+1);\n            % generate UIcontrol edit boxes\n            for i = 1:n/2  % left side\n                if ismember(i,UsedOutputChannels)\n                    lo(i) = uicontrol(f3,'Position',[40 Height-i*nspacing 100 20],'Style', 'edit','String',OutputChannelNames{i},'FontSize',12,'Callback',@OutputConfigCallback);\n                else\n                    lo(i) = uicontrol(f3,'Position',[40 Height-i*nspacing 100 20],'Style', 'edit','FontSize',12,'Callback',@OutputConfigCallback);\n                end\n                uicontrol(f3,'Position',[160 Height-i*nspacing 50 20],'Style', 'text','String',OutputChannels{i},'FontSize',12);\n            end\n            for i = 1:n/2  % right side\n                if ismember(n/2+i,UsedOutputChannels)\n                    \n                    ro(i) = uicontrol(f3,'Position',[300 Height-i*nspacing 100 20],'Style', 'edit','String',OutputChannelNames{n/2+i},'FontSize',12,'Callback',@OutputConfigCallback);\n                else\n                    ro(i) = uicontrol(f3,'Position',[300 Height-i*nspacing 100 20],'Style', 'edit','FontSize',12,'Callback',@OutputConfigCallback);\n                end\n                uicontrol(f3,'Position',[220 Height-i*nspacing 50 20],'Style', 'text','String',OutputChannels{n/2+i},'FontSize',12);\n            end\n            \n        else\n            error('Odd number of channels, cannot handle this')\n        end\n        \n        % make the digital outputs\n        n = nDigitalOutputChannels;\n        Height = 700;\n        f4 = figure('Position',[550 150 550 Height],'Resize','off','Toolbar','none','Menubar','none','Name','Configure Digital Output Channels','NumberTitle','off','CloseRequestFcn',@QuitConfigOutputsCallback);\n        a = axes; hold on\n        set(a,'Visible','off');\n        if floor(n/2)*2 == n\n            % even n\n            nspacing = Height/(n/2+1);\n            % generate UIcontrol edit boxes\n            for i = 1:n/2  % left side\n                if ismember(i,UsedDigitalOutputChannels)\n                    dlo(i) = uicontrol(f4,'Position',[40 Height-i*nspacing 100 20],'Style', 'edit','String',DigitalOutputChannelNames{i},'FontSize',10,'Callback',@OutputConfigCallback);\n                else\n                    dlo(i) = uicontrol(f4,'Position',[40 Height-i*nspacing 100 20],'Style', 'edit','FontSize',10,'Callback',@OutputConfigCallback);\n                end\n                uicontrol(f4,'Position',[160 Height-i*nspacing 100 20],'Style', 'text','String',DigitalOutputChannels{i},'FontSize',10);\n            end\n            for i = 1:n/2  % right side\n                if ismember(n/2+i,UsedOutputChannels)\n                    \n                    dro(i) = uicontrol(f4,'Position',[390 Height-i*nspacing 100 20],'Style', 'edit','String',DigitalOutputChannelNames{n/2+i},'FontSize',10,'Callback',@OutputConfigCallback);\n                else\n                    dro(i) = uicontrol(f4,'Position',[390 Height-i*nspacing 100 20],'Style', 'edit','FontSize',10,'Callback',@OutputConfigCallback);\n                end\n                uicontrol(f4,'Position',[280 Height-i*nspacing 100 20],'Style', 'text','String',DigitalOutputChannels{n/2+i},'FontSize',10);\n            end\n            \n        else\n            error('Odd number of channels, cannot handle this')\n        end\n    \n    end\n\n%% manual control callback\nfunction [] =ManualControlCallback(eo,ed)\n        % stop scopes\n        if scopes_running\n            % stop scopes\n            s.stop;\n            delete(lh);\n            % relabel scopes button\n            set(StartScopes,'String','Start Scopes');\n            scopes_running = 0;\n        end\n        % stop trial if necessary\n        if trial_running\n            error('Trial running, wait for trial to finish')\n        end\n        \n        % make UI\n        n = nOutputChannels;\n        Height = 300;\n        fMC = figure('Position',[60 50 650 Height],'Toolbar','none','Menubar','none','Name','Manual Control','NumberTitle','off','CloseRequestFcn',@QuitManualControlCallback);\n        a = axes; hold on\n        set(a,'Visible','off');\n        if floor(n/2)*2 == n\n            % even n\n            nspacing = Height/(n/2+1);\n            % generate UIcontrol edit boxes\n            oi=1; % this is the index of each used ouput channel\n            for i = 1:n/2  % left side\n                if ismember(i,UsedOutputChannels)\n                    MCoi(oi) = uicontrol(fMC,'Position',[90 Height-i*nspacing 100 20],'Style', 'slider','Min',0,'Max',5,'Value',0,'String',OutputChannelNames{i},'FontSize',16,'Callback',@ManualControlSliderCallback);\n                    uicontrol(fMC,'Position',[220 Height-i*nspacing 50 20],'Style', 'text','String',OutputChannels{i},'FontSize',12);\n                    MCNumoi(oi) = uicontrol(fMC,'Position',[20 Height-i*nspacing 60 20],'Style', 'edit','String','0','FontSize',12,'Callback',@ManualControlSliderCallback);\n                    oi = oi +1; \n                end\n            end\n            for i = 1:n/2  % right side  \n                if ismember(i+n/2,UsedOutputChannels)\n                    MCoi(oi) = uicontrol(fMC,'Position',[390 Height-i*nspacing 100 20],'Style', 'slider','Min',0,'Max',5,'Value',0,'String',OutputChannelNames{n/2+i},'FontSize',16,'Callback',@ManualControlSliderCallback);\n                    uicontrol(fMC,'Position',[320 Height-i*nspacing 50 20],'Style', 'text','String',OutputChannels{(n/2+i)},'FontSize',12);\n                    MCNumoi(oi) = uicontrol(fMC,'Position',[520 Height-i*nspacing 60 20],'Style', 'edit','String','0','FontSize',12,'Callback',@ManualControlSliderCallback);\n                    oi = oi +1;\n                end\n            end\n            \n        else\n            % odd number of channels\n            error('Odd number of channels. Cant handle this')\n        end\n        \n        % configure session\n        figure(scope_fig)   \n        s = daq.createSession('ni');\n        s.IsContinuous = true;\n        s.Rate = w; \n        \n        % configure session inputs\n        s.NotifyWhenDataAvailableExceeds = 100; % 10Hz \n        % update scope_plot_data\n        scope_plot_data = NaN(length(get(PlotInputs,'Value')),5000); % 5 s of  data in each channel\n        ScopeHandles = []; % axis handles for each sub plot in scope\n        rows = ceil(length(get(PlotInputs,'Value'))/2);\n        ScopeThese = get(PlotInputs,'Value');\n        PlotNames = get(PlotInputs,'String'); \n        for i = 1:length(get(PlotInputs,'Value'))\n            ScopeHandles(i) = subplot(2,rows,i);\n            plotname=strcat(InputChannels{UsedInputChannels(i)},'-',InputChannelNames{UsedInputChannels(i)});\n            ylabel(plotname)\n            set(ScopeHandles(i),'XLim',[0 5000]), hold off\n            s.addAnalogInputChannel('Dev1',InputChannels{UsedInputChannels(ScopeThese(i))}, 'Voltage'); % add channel\n        end\n        lh = s.addlistener('DataAvailable',@PlotCallback);\n        \n        % configure session outputs\n        MCOutputData = zeros(length(UsedOutputChannels),500)'; \n        TheseChannels=OutputChannels(UsedOutputChannels);\n        for i = 1:length(TheseChannels)\n             s.addAnalogOutputChannel('Dev1',OutputChannels{UsedOutputChannels(i)}, 'Voltage');\n        end\n        s.queueOutputData(MCOutputData);\n        %s.NotifyWhenScansQueuedBelow = 100; % this line causes random\n        %stops; don't know why\n        lhMC = s.addlistener('DataRequired',@(src,event) src.queueOutputData(MCOutputData));\n        \n        % start it\n        s.ExternalTriggerTimeout = 100;\n        s.startBackground();\n        scopes_running= 1;\n        \n        \n\n        \n    \nend\n\n%% manual control slider and text entry callback\n% bug here -- slider doesnt work becauyse its overwritten by the text edit\n    function ManualControlSliderCallback(eo,ed)\n        for i = 1:length(UsedOutputChannels)\n            thisvalue = get(MCoi(i),'Value');\n            MCOutputData(:,i) = thisvalue*ones(500,1);\n        end\n        % now check text entry fields. this overrides the slider\n        for i = 1:length(UsedOutputChannels)\n            thisvalue = str2double(get(MCNumoi(i),'String'));\n            MCOutputData(:,i) = thisvalue*ones(500,1);\n        end\n        \n        delete(lhMC)\n        lhMC = s.addlistener('DataRequired',@(src,event) src.queueOutputData(MCOutputData));\n        \n        \n        \n    end\n\n%% input config callback\n    function [] = InputConfigCallback(eo,ed)\n        UsedInputChannels = [];\n        n = nInputChannels;\n         % first scan left\n         for i = 1:n/2\n              if isempty(strmatch(get(li(i),'String'),InputChannels))\n                  % use this channel\n                  UsedInputChannels = [UsedInputChannels i];\n\n                  InputChannelNames{i} = get(li(i),'String');\n                  keyboard                  InputChannelRanges(i) = str2double(get(lir(i),'String'));\n                  % check if it is a ground channel\n                  if strcmp(get(li(i),'String'),'Ground')\n                      set(li(i),'ForegroundColor','g')\n                  else\n                      set(li(i),'ForegroundColor','k')\n                  end\n              \n              end\n              \n         end\n         % then scan right\n         for i = 1:n/2\n              if isempty(strmatch(get(ri(i),'String'),InputChannels))\n                  % use this channel\n                  UsedInputChannels = [UsedInputChannels n/2+i];\n                  InputChannelNames{n/2+i} = get(ri(i),'String');\n                  InputChannelRanges(n/2+i) = str2double(get(rir(i),'String'));\n                  % check if it is a ground channel\n                  if strcmp(get(ri(i),'String'),'Ground')\n                      set(ri(i),'ForegroundColor','g')\n                  else\n                      set(ri(i),'ForegroundColor','k')\n                  end\n              end\n         end\n         \n         % update the input channel list\n         PlotInputsList = InputChannelNames(UsedInputChannels);\n         set(PlotInputs,'String',PlotInputsList)\n         if ~isempty(UsedInputChannels)\n             set(StartScopes,'Enable','on')\n             \n         else \n             set(StartScopes,'Enable','off')\n         end\n         % save Input Channel Names for persisitent config\n         save('Kontroller.Config.Input.mat','InputChannelNames','UsedInputChannels','InputChannelRanges');\n        \n    end\n\n%% output config callback\nfunction [] = OutputConfigCallback(eo,ed)\n    % configure analogue outputs\n        UsedOutputChannels = [];\n        n = nOutputChannels;\n         % first scan left\n         for i = 1:n/2\n              if isempty(strmatch(get(lo(i),'String'),OutputChannels))\n                  % use this channel\n                  UsedOutputChannels = [UsedOutputChannels i];\n                  OutputChannelNames{i} = get(lo(i),'String');\n              end\n         end\n         % then scan right\n         for i = 1:n/2\n              if isempty(strmatch(get(ro(i),'String'),OutputChannels))\n                  % use this channel\n                  UsedOutputChannels = [UsedOutputChannels n/2+i];\n                  OutputChannelNames{n/2+i} = get(ro(i),'String');\n              end\n         end\n         \n         % update the output channel control signal config\n         if ~isempty(UsedOutputChannels)\n             set(ConfigureControlSignalsButton,'Enable','on')\n             \n         else \n             set(ConfigureControlSignalsButton,'Enable','off')\n         end\n         % now update digital outputs\n         DigitalOutputChannelNames = {};\n         UsedDigitalOutputChannels = [];\n         n = nDigitalOutputChannels;\n         % first scan left\n         for i = 1:n/2\n              if isempty(strmatch(get(dlo(i),'String'),DigitalOutputChannels))\n                  % use this channel\n                  UsedDigitalOutputChannels = [UsedDigitalOutputChannels i];\n                  DigitalOutputChannelNames{i} = get(dlo(i),'String');\n              end\n         end\n         % then scan right\n         for i = 1:n/2\n              if isempty(strmatch(get(dro(i),'String'),DigitalOutputChannels))\n                  % use this channel\n                  UsedDigitalOutputChannels = [UsedDigitalOutputChannels n/2+i];\n                  DigitalOutputChannelNames{n/2+i} = get(dro(i),'String');\n              end\n         end\n         \n         % update the output channel control signal config\n         if ~isempty(UsedOutputChannels) || ~isempty(UsedDigitalOutputChannels)\n             set(ConfigureControlSignalsButton,'Enable','on')\n             \n         else \n             set(ConfigureControlSignalsButton,'Enable','off')\n         end\n         \n         PlotOutputsList = [OutputChannelNames(UsedOutputChannels) DigitalOutputChannelNames(UsedDigitalOutputChannels)];\n         set(PlotOutputs,'String',PlotOutputsList)\n         % save Analogue Output Channel Names for persisitent config\n         \n         save('Kontroller.Config.Output.mat','OutputChannelNames','UsedOutputChannels');\n         \n         % save Digital Output Channel Names for persisitent config\n         save('Kontroller.Config.Output.Digital.mat','DigitalOutputChannelNames','UsedDigitalOutputChannels');\n        \nend\n\n%% oscilloscope callback\n    function  [] = ScopeCallback(eo,ed)\n        if isempty(PlotInputsList)\n        else\n            if scopes_running\n                % stop scopes\n                s.stop;\n                delete(lh);\n                % relabel scopes button\n                set(StartScopes,'String','Start Scopes');\n                scopes_running = 0;\n            else\n                % start scopes\n                figure(scope_fig)\n                w = 1000; % 1kHz sampling     \n                % create session\n                s = daq.createSession('ni');\n                s.IsContinuous = true;\n                s.NotifyWhenDataAvailableExceeds = w/10; % 10Hz\n                % update scope_plot_data\n                scope_plot_data = NaN(length(get(PlotInputs,'Value')),5000); % 5 s of  data in each channel\n                ScopeHandles = []; % axis handles for each sub plot in scope\n                rows = ceil(length(get(PlotInputs,'Value'))/2);\n                ScopeThese = get(PlotInputs,'Value');\n                for i = 1:length(get(PlotInputs,'Value'))\n                    ScopeHandles(i) = subplot(2,rows,i);\n                    set(ScopeHandles(i),'XLim',[0 5000]), hold off\n                    title( strcat(InputChannels{UsedInputChannels(i)},' -- ',InputChannelNames{UsedInputChannels(i)}))\n                    s.addAnalogInputChannel('Dev1',InputChannels{UsedInputChannels(ScopeThese(i))}, 'Voltage'); % add channel\n                end\n                \n                s.Rate = w; \n                lh = s.addlistener('DataAvailable',@PlotCallback);\n                \n                % specify each channel's range\n                for i = 1:length(s.Channels)\n                    % figure out which channel it is\n                    [a,~]=ind2sub(size(InputChannels), strmatch(s.Channels(i).ID, InputChannels, 'exact'));\n                    s.Channels(i).Range = InputChannelRanges(a)*[-1 1];\n                end\n                \n                % fix scope labels\n                ScopeThese = 1:length(get(PlotInputs,'Value'));\n                \n                % relabel scopes button\n                set(StartScopes,'String','Stop Scopes');\n                s.startBackground();\n                scopes_running = 1;\n   \n            end\n       \n        end   \n    end\n\n%% plot live data to scopes and grab data\n    function [] = PlotCallback(src,event)\n        sz = size(scope_plot_data);\n        % capture all the data acquired...\n        for si = 1:sz(1)\n            scope_plot_data(si,:)=[scope_plot_data(si,length(event.Data)+1:end) event.Data(:,si)'];\n        end\n        % ...but plot only the ones requested\n        if gui\n            for si = ScopeThese\n                plot(ScopeHandles(si),scope_plot_data(si,:));\n\n            end\n            trial_running = trial_running - 1;\n        else\n            if rand>0.9\n                fprintf('.')\n            end\n        end\n        \n    end\n\n%% configure control signals\n    function [] = ConfigureControlSignals(eo,ed)\n        no = length(UsedOutputChannels) + length(UsedDigitalOutputChannels);\n        Height = 100+no*100;\n        % figure out the variables in the workspace that you can use. \n        % we require them to be a 1D vector. that's it. \n        var=evalin('base','whos');\n        badvar=  [];\n        for i  =1:length(var)\n            if  ~((length(var(i).size)==2) || (min(var(i).size) == 1))\n                badvar = [badvar i];\n            end\n        end\n        \n        var(badvar) = []; clear badvar\n        \n        % make the gui\n        fcs= figure('Position',[200 200 450 Height],'Toolbar','none','Menubar','none','Name','Select Control Signals','NumberTitle','off','Resize','off');\n        ControlHandles = [];\n        if length(var) >= no\n            % assemble names into a cell array\n            VarNames = {};\n            for i = 1:length(var)\n                VarNames{i} = var(i).name;\n            end\n            \n            \n            % get name of control paradigm\n            ParadigmNameUI=uicontrol(fcs,'Position',[(450-340)/2 Height-30 340 24],'Style', 'edit','String','Enter Name of Control Paradigm','FontSize',12);\n            \n            \n            for i = 1:length(UsedOutputChannels)\n                ControlHandles(i) = uicontrol(fcs,'Position',[150 10+i*100 150 50],'Style','popupmenu','Enable','on','String',VarNames,'FontSize',12);\n                uicontrol(fcs,'Position',[30 30+i*100 100 30],'Style','text','String',OutputChannels{UsedOutputChannels(i)},'FontSize',12);\n                uicontrol(fcs,'Position',[320 30+i*100 100 30],'Style','text','String',OutputChannelNames{UsedOutputChannels(i)},'FontSize',12);\n\n            end\n            ti=1;\n            for i = length(UsedOutputChannels)+1:no\n                ControlHandles(i) = uicontrol(fcs,'Position',[150 10+i*100 150 50],'Style','popupmenu','Enable','on','String',VarNames,'FontSize',12);\n                uicontrol(fcs,'Position',[30 30+i*100 100 30],'Style','text','String',DigitalOutputChannels{UsedDigitalOutputChannels(ti)},'FontSize',12);\n                uicontrol(fcs,'Position',[320 30+i*100 100 30],'Style','text','String',DigitalOutputChannelNames{UsedDigitalOutputChannels(ti)},'FontSize',12);\n                ti=ti+1;\n            end\n            \n            clear ti\n            % button to save paradigm\n            uicontrol(fcs,'Position',[370 30 60 30],'Style','pushbutton','String','+Add','FontSize',12,'Callback',@ConfigureControlCallback);\n\n        else\n            % tell the user they don't enough variables to configure controls\n            uicontrol(fcs,'Position',[25 70 400 200],'Style','text','String','To manually configure a control paradigm, you must have at least as many vectors in your MATLAB workspace as you have analogue outputs. This is not the case. Either close this and create some, or load a previously saved control paradigm from file. ','FontSize',12);\n        \n        end\n        \n        % button for loading saved control paradigms\n        uicontrol(fcs,'Position',[10 30 260 30],'Style','pushbutton','String','Load saved paradigms...','FontSize',12,'Callback',@LoadSavedParadigms);\n        \n        \n        \n    end\n\n%% configure control callback\n    function [] = ConfigureControlCallback(eo,ed)\n        no = length(UsedOutputChannels) + length(UsedDigitalOutputChannels);\n        % assume everything is OK, and make a paradigm\n        ControlParadigm(length(ControlParadigm)+1).Name= get(ParadigmNameUI,'String');\n        thisp = length(ControlParadigm);\n        % and now fill in the analogue control signals\n        for i = 1:length(UsedOutputChannels);\n            ControlParadigm(thisp).Outputs(i,:)=evalin('base',cell2mat(VarNames(get(ControlHandles(i),'Value'))));\n        end\n        % now fill in the digital control signals\n        ti=1;\n        for i = length(UsedOutputChannels)+1:no\n            ControlParadigm(thisp).Outputs(i,:)=evalin('base',cell2mat(VarNames(get(ControlHandles(i),'Value'))));\n            ti=ti+1;\n        end\n        % update the paradigm list\n        ControlParadigmList = [ControlParadigmList get(ParadigmNameUI,'String')];\n        set(ParadigmListDisplay,'String',ControlParadigmList)\n        \n        % update Trial count\n        Trials = zeros(1,length(ControlParadigmList));\n        set(Konsole,'String','Controls have been configured. ')\n        \n        % enable the run button\n        set(RunTrialButton,'enable','on','String','RUN w/o saving','BackgroundColor',[0.9 0.1 0.1]);\n    end\n\n%% select destintion callback\n    function [] = SelectDestinationCallback(eo,ed)\n        temp=strcat(datestr(now,'yyyy_mm_dd'),'_customname.mat');\n        SaveToFile=uiputfile(strcat('C:\\data\\',temp));\n        % activate the run buttons\n        set(RunTrialButton,'enable','on','BackgroundColor',[0.1 0.9 0.1],'String','RUN and SAVE');\n        set(RunProgramButton,'enable','on');\n        % update display\n        set(FileNameDisplay,'String',SaveToFile);\n        % reset Trial count\n        Trials = zeros(1,length(ControlParadigmList)); \n        timestamps = [];\n        data = []; % clears the data, so that new data is written to the new file\n        sequence=  [];\n        sequence_step = [];\n         \n    end\n\n%% save to file destination callback\n    function [] = SaveToFileTextEdit(eo,ed)\n        if isempty(get(FileNameDisplay,'String'))\n            % no destination\n            set(RunTrialButton,'enable','on','BackgroundColor',[0.9 0.1 0.1],'String','RUN w/o saving');\n        else\n            if exist(strcat('c:\\data\\',get(FileNameDisplay,'String')),'file')\n                % file already exists, will overwrite\n                set(FileNameDisplay,'ForegroundColor','r')\n            else\n                % new file\n                set(FileNameDisplay,'ForegroundColor','k')\n            end\n            set(RunTrialButton,'enable','on','BackgroundColor',[0.1 0.9 0.1],'String','RUN and SAVE');\n            % reset Trial count\n            Trials = zeros(1,length(ControlParadigmList)); \n            % reset timestamps\n            timestamps = [];\n            data = []; % clears the data, so that new data is written to the new file\n            sequence=  [];\n            sequence_step = [];\n            SaveToFile = get(FileNameDisplay,'String');\n        end\n            \n    end\n%% RandimzeControl Callbacl -- for custom sequence\n    function [] = RandomiseControlCallback(eo,ed)\n        % get sequence\n        if  get(RandomizeControl,'Value') == 5\n            CustomSequence = inputdlg('Enter sequence of paradigms in program:','Choose custom sequence');\n            set(Konsole,'string',strkat('This custom programme of the following pradigms configured: ',CustomSequence{1}))\n        end\n        \n    end\n\n%% run programmme\n    function [] = RunProgram(eo,ed)\n        % make sure pause programme button is enabled\n        set(PauseProgramButton,'Enable','on');\n        \n        % check if pause is required\n        if get(PauseProgramButton,'Value') \n            set(PauseProgramButton,'String','PAUSED')\n        end\n        while get(PauseProgramButton,'Value') == 1  \n            pause(0.1)\n        end\n\n            \n        \n        % figure out how many trials have been run so far\n        if isempty(sequence)\n            % start the timer\n            tic\n            % make the sequence\n            np = get(ParadigmListDisplay,'Value');\n            \n            ntrials= str2num(get(RepeatNTimesControl,'String'));\n            \n            % figure out how to arrange paradigms\n            switch get(RandomizeControl,'Value') \n                case 1\n                    % randomise\n                    sequence = repmat(np,1,ntrials);\n                    sequence = sequence(randperm(length(sequence),length(sequence)));\n                case 2\n                    % interleave\n                    sequence = repmat(np,1,ntrials);\n                case 3\n                    % block\n                    sequence =  reshape((np'*ones(1,ntrials))',1,ntrials*length(np));\n                case 4\n                    % reverse block\n                    sequence =  reshape((np'*ones(1,ntrials))',1,ntrials*length(np));\n                    sequence = fliplr(sequence);\n                case 5\n                    % arbitrary\n                    if ~isempty(CustomSequence)\n                        sequence =  str2num(CustomSequence{1}); %#ok<ST2NM>\n                    else\n                        error('Cannot find custom sequence.')\n                    end\n                    \n            end\n              \n            \n            sequence_step = 1;\n            programme_running = 1;\n            set(RunProgramButton,'Enable','off')\n            set(RunTrialButton,'Enable','off')\n        end\n\n\n        if sequence_step < length(sequence) + 1\n            % update time estimates\n            t=toc;\n            tt=(t/(sequence_step))*length(sequence) - t; % time remaining\n            tt=oval(tt,2);\n            t=oval(toc,2);\n            ks = strkat('Running inter-trial function....','\\n','Elapsed time is :', (t), 'seconds'...\n               ,'\\n',(tt),'seconds remain');\n            \n            % run inter-trial function\n            iti = (get(InterTrialIntervalControl,'String'));\n            set(Konsole,'String',ks)\n            eval(iti)\n            \n            % check if pause is required\n            if get(PauseProgramButton,'Value') \n                set(PauseProgramButton,'String','PAUSED')\n            end\n            while get(PauseProgramButton,'Value') == 1  \n                pause(0.1)\n            end\n\n\n            % run the correct step of the sequence\n            set(ParadigmListDisplay,'Value',sequence(sequence_step));\n            sequence_step = sequence_step + 1;\n            RunTrial; \n           \n        else  \n            % programme has finished running\n            programme_running = 0;\n            set(Konsole,'String','Programme has finished running.')\n            set(RunProgramButton,'Enable','on')\n            set(RunTrialButton,'Enable','on')\n            set(PauseProgramButton,'Enable','off')\n            \n            % re-select the initially selected paradgims\n            set(ParadigmListDisplay,'Value',unique(sequence));\n            \n            sequence = [];\n            sequence_step = [];\n            \n            \n        end\n    end\n\n%% pause program\n    function [] = PauseProgram(eo,ed)\n        if pause_programme\n            set(PauseProgramButton,'String','PAUSE');\n            pause_programme = 0;\n        else\n            set(PauseProgramButton,'String','Pausing...')\n            pause_programme = 1;\n        end\n        \n        \n    end\n\n%% control paradigm list callback\n    function [] = ControlParadigmListCallback(eo,ed)\n        % how many paradigms selected?\n        if length(get(ParadigmListDisplay,'Value')) > 1\n            % more than one. so unset RUN\n            set(RunTrialButton,'Enable','off');\n            set(ViewControlParadigmButton,'Enable','off');\n        else \n            set(ViewControlParadigmButton,'Enable','on');\n            % check if destination is OK\n            if ~isempty(SaveToFile)\n                set(RunTrialButton,'Enable','on');\n            end\n        end\n        if Trials(get(ParadigmListDisplay,'Value'))\n            showthis = strkat(mat2str(Trials(get(ParadigmListDisplay,'Value'))),'  trials recorded on selected Paradigm(s)');\n            set(Konsole,'String',showthis)\n        else\n            % no trials on this paradigm\n            set(Konsole,'String','No trials have been recorded on selected paradigm(s).')\n        end\n    end\n\n%% view control paradigm callback\n    function [] = ViewControlParadigm(eo,ed)\n        % try to close previous figure\n        try \n            close(ViewParadigmFig)\n        catch\n        end\n\n        % there are length(UsedOutputChannels) outputs\n        no = length(UsedOutputChannels) + length(UsedDigitalOutputChannels);\n\n        % figure out how to arrange subplots\n        nrows = floor(sqrt(no));\n        ncols = ceil(no/nrows);\n        \n        ViewParadigmFig = figure('Position',[500 150 750 650],'Toolbar','none','Menubar','none','Name','Control Signals','NumberTitle','off','Resize','on'); hold on; \n        hold on\n        sr = str2double(get(SamplingRateControl,'String'));\n        t  = (1:length(ControlParadigm(get(ParadigmListDisplay,'Value')).Outputs))/sr;\n        ocn = [OutputChannelNames(UsedOutputChannels) DigitalOutputChannelNames(UsedDigitalOutputChannels)];\n        for vi = 1:no\n            subplot(nrows,ncols,vi); hold on\n            plot(t,ControlParadigm(get(ParadigmListDisplay,'Value')).Outputs(vi,:),'LineWidth',2);\n            set(gca,'XLim',[0 max(t)])\n            title(ocn{vi},'FontSize',20)\n        end\n    \n        \n    end\n\n%% run trial\n    function [] = RunTrial(eo,ed) \n        ComputeEpochs;\n        if scopes_running\n            % stop scopes\n            s.stop;\n            delete(lh);\n            % relabel scopes button\n            set(StartScopes,'String','Start Scopes');\n            scopes_running = 0;\n        end\n            \n        set(RunTrialButton,'Enable','off','String','running...')\n        % figure out which pradigm to run\n        ThisParadigm= (get(ParadigmListDisplay,'Value'));\n        % figure out trial no\n        if ~length(data)\n            % no data at all\n            Trials(ThisParadigm) = 1;\n            set(Konsole,'String',strkat('Running Trial: \\n','Paradigm: \\t \\t  ',ControlParadigmList{ThisParadigm},'\\n Trial: \\t \\t ','1'))\n        else\n            if length(data) < ThisParadigm\n            \n                % first trial in this paradigm\n                Trials(ThisParadigm) = 1;\n                set(Konsole,'String',strkat('Running Trial: \\n','Paradigm: \\t \\t  ',ControlParadigmList{ThisParadigm},'\\n Trial:\\t \\t ',mat2str(1)))\n       \n            else\n                sz = [];\n                eval(strcat('sz=size(data(ThisParadigm).',InputChannelNames{UsedInputChannels(1)},');'));\n                Trials(ThisParadigm) = sz(1)+1;\n                set(Konsole,'String',strkat('Running Trial: \\n','Paradigm: \\t \\t  ',ControlParadigmList{ThisParadigm},'\\n Trial: \\t \\t ',mat2str(sz(1)+1)))\n       \n                \n            end\n            \n        end\n        \n        w=str2num(get(SamplingRateControl,'String'));\n        if isempty(w)\n            error('Sampling Rate not defined!')\n        end\n        T= length(ControlParadigm(ThisParadigm).Outputs)/w; % duration of trial, for this trial\n        % create session\n        clear s\n        s = daq.createSession('ni');\n        s.DurationInSeconds = T;\n        s.NotifyWhenDataAvailableExceeds = w/10; % 10Hz\n        s.Rate = w; % sampling rate, user defined.\n         \n        % show the traces as we acquire them on the scope\n        figure(scope_fig)\n        \n        % update scope_plot_data\n        ScopeHandles = []; % axis handles for each sub plot in scope\n        rows = ceil(length(get(PlotInputs,'Value'))/2);\n        ScopeThese = get(PlotInputs,'Value');\n        scope_plot_data = NaN(length(UsedInputChannels),T*w);\n        \n        ti = 1;\n        for i = ScopeThese\n            ScopeHandles(i) = subplot(2,rows,ti); ti = ti+1;\n            set(ScopeHandles(i),'XLim',[0 T*w]), hold off\n        end\n         \n        % add the analogue input channels\n        TheseChannels=InputChannels(UsedInputChannels);\n        for i = 1:length(TheseChannels)\n            s.addAnalogInputChannel('Dev1',InputChannels{UsedInputChannels(i)}, 'Voltage');\n        end\n        % add the analogue output channels\n        TheseChannels=OutputChannels(UsedOutputChannels);\n        for i = 1:length(TheseChannels)\n             s.addAnalogOutputChannel('Dev1',OutputChannels{UsedOutputChannels(i)}, 'Voltage');\n        end\n        % add the digital output channels\n        TheseChannels=DigitalOutputChannels(UsedDigitalOutputChannels);\n        for i = 1:length(TheseChannels)\n             s.addDigitalChannel('Dev1',DigitalOutputChannels{UsedDigitalOutputChannels(i)}, 'OutputOnly');\n        end\n        % configure listener to plot data on the scopes \n        lh = s.addlistener('DataAvailable',@PlotCallback);\n        \n        % configure listener to log data\n        %lhWrite = s.addlistener('DataAvailable',@(src, event)logData(src, event, fid1));\n        \n        % queue data        \n        s.queueOutputData(ControlParadigm(ThisParadigm).Outputs');\n        \n        % log the timestamp\n        ts = size(timestamps);\n        timestamps(1,ts(2)+1)=ThisParadigm; % paradigm number\n        timestamps(2,ts(2)+1)=Trials(ThisParadigm); % trial number\n        timestamps(3,ts(2)+1)=(now); % time\n        \n        % read and write\n        trial_running = T*10;\n        try\n            s.startForeground();\n        catch\n            % probably because the hardware is reserved.\n            close all\n            errordlg('Kontroller could not start the task. This is probably because the hardware is reserved. You need to restart Kontroller. Sorry about that. Type \"return\" and hit enter to restart.')\n            clear all\n            exit\n            \n            \n        end\n        ProcessTrialData;\n    end\n\n%% process data == this function is called when the trial finishes running\n    function [] = ProcessTrialData(eo,ed)\n        % delete listeners\n        delete(lh)\n        \n        % check if data needs to be logged\n        if isempty(SaveToFile) && gui == 1\n            set(RunTrialButton,'enable','on','String','RUN w/o saving');\n            return\n        end\n        \n        % combine data and label correctly\n        thisdata=scope_plot_data;\n        if gui\n            ThisParadigm= (get(ParadigmListDisplay,'Value'));\n        else\n            ThisParadigm = RunTheseParadigms(gi);\n        end\n        % check if data exists\n        if isempty(data)\n            % create it          \n            for i = 1:length(UsedInputChannels)\n                if  ~strcmp(InputChannelNames{UsedInputChannels(i)},'Ground')               \n                    eval( strcat('data(ThisParadigm).',InputChannelNames{UsedInputChannels(i)},'=thisdata(',mat2str(i),',:);'));\n                end\n            end\n        else\n            % some data already exists, need to append\n            % find the correct pradigm\n            if length(data) < ThisParadigm\n                % first trial in this paradigm\n                for i = 1:length(UsedInputChannels)\n                    if  ~strcmp(InputChannelNames{UsedInputChannels(i)},'Ground')\n                        eval(strcat('data(ThisParadigm).',InputChannelNames{UsedInputChannels(i)},'=[];'))\n                    end\n                end\n            end\n\n            for i = 1:length(UsedInputChannels)\n                if  ~strcmp(InputChannelNames{UsedInputChannels(i)},'Ground')\n                    eval( strcat('data(ThisParadigm).',InputChannelNames{UsedInputChannels(i)},'=vertcat(data(ThisParadigm).',InputChannelNames{UsedInputChannels(i)},',thisdata(',mat2str(i),',:));'))\n            \n                end\n            end\n\n        end\n            \n        % save data to file\n        if gui\n            SamplingRate= str2double(get(SamplingRateControl,'String'));\n        end\n        \n        if gui\n            temp = OutputChannelNames;\n            OutputChannelNames = {OutputChannelNames{UsedOutputChannels} DigitalOutputChannelNames{UsedDigitalOutputChannels}};\n            save(strcat('C:\\data\\',SaveToFile),'data','ControlParadigm','metadata','OutputChannelNames','SamplingRate','timestamps');       \n        \n            OutputChannelNames = temp; clear temp\n            set(RunTrialButton,'Enable','on','String','RUN and SAVE');      \n            set(Konsole,'String',strkat('Trial ',mat2str(Trials(ThisParadigm)),'/Paradigm ',mat2str(ThisParadigm),' completed.'));\n        end\n        % check to make sure that the session has stopped\n        if s.IsRunning\n            s.stop;\n        end\n        % check if there is a programme running, and handle it approproately \n        if programme_running\n            % continue with the flow\n            RunProgram;\n        end\n        \n    end\n\n%% save control paradigms\n    function [] = SaveControlParadigms(eo,ed)\n        temp=strcat(datestr(now,'yyyy_mm_dd'),'_Kontroller_paradigm_.mat');\n        ControlParadigmSaveToFile=uiputfile(temp);\n        save(ControlParadigmSaveToFile,'ControlParadigm');\n    end\n\n%% load saved paradigms\n    function [] = LoadSavedParadigms(eo,ed)\n        [FileName,PathName] = uigetfile('*_Kontroller_paradigm*');\n        temp=load(strcat(PathName,FileName));\n\n        % check that this Control PAradigm has the same number of outputs as there are output channels\n        [nol,~]=size(temp.ControlParadigm(1).Outputs);\n        if nol == length(UsedOutputChannels) + length(UsedDigitalOutputChannels)\n            % alles OK\n        else\n            % ouch\n            \n            errordlg('Error: The Paradigm you tried to load doesnt have the same number of outputs as the number of outputs currently configured. Either load a new Control Paradigm, or change the number of OutputChannels to match this paradigm.','Kontroller cannot do this.')\n            return\n        end \n\n        ControlParadigm=temp.ControlParadigm;\n        clear temp\n        % now update the list\n        ControlParadigmList = {};\n        for i = 1:length(ControlParadigm)\n            ControlParadigmList = [ControlParadigmList ControlParadigm(i).Name];\n        end\n        set(ParadigmListDisplay,'String',ControlParadigmList)\n        \n        % update Trial count\n        Trials = zeros(1,length(ControlParadigmList));\n        set(Konsole,'String','Controls have been configured. ')\n        \n        % update run button\n        if isempty(SaveToFile)\n            set(RunTrialButton,'enable','on','String','RUN w/o saving','BackgroundColor',[0.9 0.1 0.1]);\n        else\n            set(RunTrialButton,'enable','on','String','RUN and SAVE','BackgroundColor',[0.1 0.9 0.1]);\n        end\n        \n    end\n\n%% metadata callback\n    function [] = MetadataCallback(eo,ed)\n        % open the editor\n        mef = figure('Position',[60 50 450 400],'Toolbar','none','Menubar','none','Name','Metadata Editor','NumberTitle','off','Resize','off');\n        uicontrol(mef,'Style','Text','String','Add or modify metadata using standard MATLAB syntax, one variable at a time, below:','Position',[5 340 440 50],'HorizontalAlignment','left')\n        MetadataTextControl = uicontrol(mef,'Style', 'edit', 'String','','Position',[5 285 440 40],'HorizontalAlignment','left','Callback',@AddMetadata);\n        MetadataTextDisplay = uicontrol(mef,'Style','Text','String',metadatatext,'Position',[5 5 440 270]);\n        \n    end\n\n%% metadata editor callback\n    function [] = AddMetadata(eo,ed)        \n        % evaluate it\n        eval(strcat('metadata.',get(MetadataTextControl,'String')));\n        % rebuild display cell string\n        metadatatext = [];\n        fn = fieldnames(metadata);\n        for i = 1:length(fn)\n            metadatatext{i} = strcat(fn{i},' : ',mat2str(getfield(metadata,fn{i})));\n        end\n        set(MetadataTextDisplay,'String',metadatatext);\n        set(MetadataTextControl,'String','');\n        \n    end\n\n%% clean up when quitting Kontroller\n    function [] = QuitKontrollerCallback(eo,ed)\n       selection = questdlg('Are you sure you want to quit Kontroller?','Confirm quit.','Yes','No','Yes'); \n       switch selection, \n          case 'Yes',\n              try\n                delete(scope_fig)\n              catch\n              end\n              try\n                delete(mef)\n              catch\n              end\n              try\n                   delete(f1);\n              catch\n              end\n              try\n                    delete(f2);\n              catch\n              end\n              try\n                    delete(f3);\n              catch\n              end\n              try\n                    delete(f4);\n              catch\n              end\n              try\n                    delete(mef);\n              catch\n              end\n              try\n                    delete(ViewParadigmFig);\n              catch\n              end\n              try\n                    delete(fcs);\n              catch\n              end\n          case 'No'\n          return \n       end\n    end\n\n%% clean up when quitting Manual Control\n    function [] = QuitManualControlCallback(eo,ed)\n        % stop session\n        try\n            s.stop;\n            delete(lh)\n            delete(lhMC)\n        catch\n        end\n        \n        delete(gcf)\n        scopes_running=0;\n\n    end\n\n%% on closing output config wiindows\n    function  [] = QuitConfigOutputsCallback(eo,ed)\n        % close both windows together\n        try\n            delete(f3);\n        end\n        try\n            delete(f4);\n        end\n    end\n\n%% remove control paradigms\n\n    function [] = RemoveControlParadigms(eo,ed)\n        if ~isempty(ControlParadigmList)\n            removethese = get(ParadigmListDisplay,'Value');\n            \n             \n            % remove them from the ControlParadigm list\n            ControlParadigmList(removethese) = [];\n            \n            % remove them from the display list\n            set(ParadigmListDisplay,'Value',1)\n            set(ParadigmListDisplay,'String',ControlParadigmList);\n            % remove them from the actual control paradigm data structure\n            ControlParadigm(removethese) = [];\n            \n        else\n            % do nothing for now\n        end\n        \n    end\n\n%% Compute Epochs\n\n    function [] = ComputeEpochs(eo,ed)\n        ThisParadigm =  (get(ParadigmListDisplay,'Value'));\n        TheseDigitalOutputs = [];\n        TheseDigitalOutputs=ControlParadigm(ThisParadigm).Outputs(length(UsedOutputChannels)+1:length([UsedOutputChannels UsedDigitalOutputChannels]),:);\n        sz = size(TheseDigitalOutputs);\n        Epochs = zeros(1,sz(2));\n        for si = 1:sz(1)\n            TheseDigitalOutputs(si,:) = TheseDigitalOutputs(si,:).*(2^si-1);\n        end\n        Epochs = sum(TheseDigitalOutputs);\n        % compress epochs\n        ue = unique(Epochs);\n        for si = 1:length(unique(Epochs))\n            Epochs(Epochs == ue(si)) = 1e4+si;\n        end\n        Epochs = Epochs-1e4;\n    end\n\nend",
			"file": "/code/Kontroller/Kontroller.m",
			"file_size": 68714,
			"file_write_time": 130399019870000000,
			"settings":
			{
				"buffer_size": 65254,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"Package",
				"Package Control: Install Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"Package Control: Disable Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"newfile",
				"File: New View into File"
			],
			[
				"sidebar",
				"View: Toggle Side Bar"
			],
			[
				"syntax js",
				"Set Syntax: JavaScript"
			],
			[
				"syntax matlb",
				"Set Syntax: MATLAB"
			],
			[
				"Package Control: Install",
				"Package Control: Install Package"
			],
			[
				"disp",
				"Snippet: disp"
			],
			[
				"error",
				"Snippet: error"
			],
			[
				"Snippet: error",
				"Snippet: error"
			]
		],
		"width": 453.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/sigbhu/Dropbox/code/auto/where-am-i.py",
		"/Users/sigbhu/Dropbox/code/auto/keep-process-running.sh",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAPIDAirspeeds.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFATurns.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses6.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses5.m",
		"/Users/sigbhu/Dropbox/code/Kontroller/Kontroller.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAFlyStats2.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses7.m",
		"/code/auto/where-am-i.py",
		"/Users/sigbhu/Dropbox/code/core/PrettyFig.m",
		"/Users/sigbhu/Dropbox/code/b/ValidateTrial.m",
		"/Users/sigbhu/Dropbox/code/b/FindControlParadigmOrder.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAPIDAirspeeds2.m",
		"/code/MFC-setup/temp.m",
		"/Users/sigbhu/Dropbox/code/b/temp.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseTFA.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseRestingBehaviour.m",
		"/Users/sigbhu/Dropbox/code/b/AnalysePIDMultiPuffs3.m",
		"/Users/sigbhu/Dropbox/code/b/AnalysePIDMultiPuffs2.m",
		"/Users/sigbhu/Dropbox/code/b/AnalysePIDMultiPuffs.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseOdourResponse_X3.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseOdourResponse_Engine.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseOdourResponse.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseFlyPositionEffect.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseAnemotacticResponse.m",
		"/Users/sigbhu/Dropbox/code/b/AnalyseAirspeedsMultiPuffs.m",
		"/Users/sigbhu/Dropbox/code/b/AggregateTempWBF.m",
		"/Users/sigbhu/Dropbox/code/b/RebuildTFADatabase.m",
		"/dev/random",
		"/Users/sigbhu/Dropbox/code/b/ProcessKontrollerTFAData.m",
		"/Users/sigbhu/Dropbox/code/core/rdir.m",
		"/Users/sigbhu/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/sigbhu/Dropbox/code/b/TFAViewer2.m",
		"/Volumes/SKADI/Installers/Mac/AutoCAD/ReadMe.txt",
		"/Volumes/SKADI/Installers/Adobe Photoshop Lightroom 5.3 Final Mac OS X [ChingLiu]/ChingLiu.Install.Notes.txt",
		"/Users/sigbhu/Dropbox/code/b/srinivas_latex.xsl",
		"/Users/sigbhu/Dropbox/code/Kontroller/MakeMFCDilutionSignals.m",
		"/Users/sigbhu/Dropbox/code/b/Alicat_MFC_Analysis.m",
		"/Users/sigbhu/Dropbox/code/DA/Analysis_January.m",
		"/Users/sigbhu/Dropbox/code/DA/Analysis_January",
		"/Users/sigbhu/Dropbox/code/b/PlotAirspeedCheck.m",
		"/Users/sigbhu/Dropbox/code/tracking/FlyTrack.m",
		"/RSSBlackList.txt",
		"/Users/sigbhu/Dropbox/code/b/FileName2GenoDate.m",
		"/Library/WebServer/Documents/wiki/LocalSettings.php",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses3.m",
		"/Users/sigbhu/Dropbox/code/core/TrialPlot.m",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/pages/people.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/nfsim/download/index.php",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/nfsim/download/processRegistration.php",
		"/Users/sigbhu/.ssh/known_hosts",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/pages/publications.html",
		"/Users/sigbhu/Dropbox/code/zoidberg/make_fig_15_metrics.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses2.m",
		"/Users/sigbhu/Dropbox/code/b/PlotTrialVariability.m",
		"/Users/sigbhu/Dropbox/code/b/PlotDoseResponses.m",
		"/Users/sigbhu/Dropbox/code/b/Convert2v2.m",
		"/Users/sigbhu/Dropbox/code/b/PlotPIDResponse.m",
		"/Users/sigbhu/Dropbox/code/core/FrameGrabM/FrameGrabM_0_8/Readme.txt",
		"/Users/sigbhu/Dropbox/code/core/oval.m",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/sigbhu/Dropbox/code/b/AnalyseTrialTrends.m",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/User/Snippets/matlab_snippets/plot(ts,linespec).sublime-snippet",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/index.html",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/User/Matlab.sublime-settings",
		"/Users/sigbhu/Downloads/soda-theme-master/Soda Dark.sublime-theme",
		"/Users/sigbhu/Library/Application Support/Sublime Text 2/Packages/User/JSON.sublime-settings",
		"/Users/sigbhu/Dropbox/code/b/PlotTFAResponses.m",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/pages/resources.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/biology.yale.edu/index.html",
		"/Users/sigbhu/.ssh/id_rsa.pub",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/seldon/2/index.html",
		"/web/seldon/3/index.html",
		"/web/seldon/3/css/base.css",
		"/Users/sigbhu/Desktop/Untitled.html",
		"/Users/sigbhu/Desktop/Untitled.webarchive",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/index.html",
		"/web/seldon/1/index.html",
		"/web/seldon/1/css/skeleton.css",
		"/web/seldon/1/css/layout.css",
		"/web/seldon/1/css/docs.css",
		"/web/seldon/1/css/base.css",
		"/web/seldon/2/index.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/seldon/1/index.html",
		"/web/seldon/index.html",
		"/web/seldon/2/css/base.css",
		"/Users/sigbhu/Desktop/My Notes/1: Introduction.html",
		"/Users/sigbhu/Dropbox/lobster_draft/data/STGDataExplorer.m",
		"/Users/sigbhu/Dropbox/code/orn-analysis/spikesort_7_19_a.m",
		"/Users/sigbhu/Dropbox/code/zoidberg/STG.m",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/nfsim/pages/feedback.php",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/nfsim/index.html",
		"/labweb/pages/people.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonet.biology.yale.edu/pages/contact.html",
		"/private/etc/hosts",
		"/Users/sigbhu/Desktop/feedback.php",
		"/Users/sigbhu/Desktop/processRegistration.php",
		"/Users/sigbhu/Desktop/index.php",
		"/Users/sigbhu/Desktop/index.html",
		"/labweb/pages/contact.html",
		"/Users/sigbhu/Desktop/Daring Fireball: Email.html",
		"/Users/sigbhu/Dropbox/lobster_draft/data/ZoidbergExplorer.m",
		"/Users/sigbhu/Dropbox/code/zoidberg/RecomputePyloricityCodes.m",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/essays/books/index.html",
		"/Users/sigbhu/Desktop/My Notes/5: Brace for the coming Food Riots.html",
		"/web/seldon/books/index.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/98bf81be-fb5d-403c-ae0a-9b72c407caf0/emonetnew.biology.yale.edu/nfsim/index.html",
		"/labweb/pages/software.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/b/css.css",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/articles/children-of-men/index.html",
		"/private/var/folders/gq/0hzwy57n79d1813pnfy51mmr0000gn/T/85b5b59a-4356-47dc-8aa5-5b910dd73d40/articles/books/index.html",
		"/web/articles/children-of-men/css/base.css",
		"/web/articles/children-of-men/index.html",
		"/web/articles/books/index.html",
		"/web/articles/books/css/base.css",
		"/web/articles/books/css/skeleton.css",
		"/web/articles/books/css/docs.css",
		"/web/articles/books/css/layout.css",
		"/labweb/pages/publications.html",
		"/web/in-development/article-template/001-books.html",
		"/web/essays/books/index.html",
		"/web/in-development/article-template/css/docs.css",
		"/web/in-development/css/template.css",
		"/web/in-development/css/article-css.css",
		"/Users/sigbhu/Dropbox/code/core/AnalyseWingBeatSignal.m"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"'k'",
			"plot",
			"TrialPlot",
			"stats",
			"exist",
			"plot",
			"key",
			"keyboard",
			"PIDfile",
			"PIDAirspeedsCallback",
			"PID",
			"PulseOn",
			"/Volumes/home/",
			"data/b/",
			"root",
			"FindAllGenotypes",
			"dataroot",
			"data/b",
			"ControlParadigm",
			"NextFile",
			"DoseResponseButton",
			"Dose Response",
			"stats",
			"nfig",
			"figure",
			"Turns",
			"Thrust",
			"Thrusts",
			"allfiles",
			"sem",
			"line",
			"equalise",
			"figure",
			"thesetrials",
			"thesetrials =",
			"thesetrials",
			"TrialPlot",
			"plottrials",
			"plotthis",
			"plot",
			"/dt",
			"3",
			"title",
			"odour",
			"FileName",
			"title",
			"FileName2",
			"plot(",
			"sublime",
			"plot",
			"TrialPlot",
			"gca",
			"a",
			"a(3)",
			"TrialPlot",
			"subplot",
			"mx",
			"dt",
			"title",
			"wbfylim",
			"thrustylim",
			"wbfylim",
			"TrialPlot",
			"Trial",
			"fly",
			"fit",
			"Airspeed",
			"Maximum",
			"Airspeed",
			"'b'",
			"TrialPlot",
			"'b'",
			"fit",
			"'k'",
			"function",
			"sx",
			"disp",
			"YLim",
			"data.raw",
			"keyboard",
			"tue",
			"mon",
			"GenotypeID",
			"FoundFilesList",
			"GenotypeID",
			"sebas",
			"TrialPlot",
			"\"thu\",",
			"thu",
			"mon\ntue\nwed\nthu",
			"];\n",
			"tue, man, tue\ntur\ntue, man",
			"tur",
			"mon",
			"tur",
			"omcWBFpeak",
			"$wgFileExtensions ",
			"png",
			"listbox",
			"<p class=\"p2\"><br></p>",
			"<p class=\"p6\"><br></p>",
			"<p class=\"p4\"><br></p>",
			"<p class=\"p2\"><br></p>",
			"wiki",
			"sneddon",
			"mousecallback",
			"mouse",
			"mous",
			"button",
			"font",
			"nfsimwebregister",
			"please contact",
			"sneddon",
			"michael",
			"sneddon",
			"microbe",
			"michael",
			"wiener",
			"sneddon",
			"michael",
			"mich",
			"blog",
			"description",
			"none",
			"description",
			"s",
			"description",
			"style"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/Volumes/emonetlab/",
			"PID",
			"",
			"s2",
			"s3",
			"PY",
			"LP",
			"AB"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/code/Kontroller/Kontroller.m",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65254,
						"regions":
						{
						},
						"selection":
						[
							[
								7604,
								7604
							]
						],
						"settings":
						{
							"syntax": "Packages/Matlab/Matlab.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3036.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Kontroller.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"plottfaair",
				"b/PlotTFAPIDAirspeeds2.m"
			],
			[
				"plottrialvariability2",
				"b/PlotTrialVariability2.m"
			],
			[
				"reb",
				"b/RebuildTFADatabase.m"
			],
			[
				"plottfaresponses7",
				"b/PlotTFAResponses7.m"
			],
			[
				"plottfaflystats2",
				"b/PlotTFAFlyStats2.m"
			],
			[
				"vali",
				"b/ValidateTrial.m"
			],
			[
				"pro",
				"b/ProcessKontrollerTFAData.m"
			],
			[
				"plot",
				"b/PlotTFAResponses5.m"
			],
			[
				"plottfapidairspeeds",
				"b/PlotTFAPIDAirspeeds.m"
			],
			[
				"processkontrollertfadata",
				"b/ProcessKontrollerTFAData.m"
			],
			[
				"proc",
				"b/ProcessKontrollerTFAData.m"
			],
			[
				"tfa",
				"b/TFAViewer2.m"
			],
			[
				"temp",
				"b/temp.m"
			],
			[
				"plottfaresponses5",
				"b/PlotTFAResponses5.m"
			],
			[
				"plottfa",
				"b/PlotTFAResponses5.m"
			],
			[
				"kontroll",
				"Kontroller/Kontroller.m"
			],
			[
				"trial",
				"core/TrialPlot.m"
			],
			[
				"filenam",
				"b/FileName2GenoDate.m"
			],
			[
				"conver",
				"b/Convert2v2.m"
			],
			[
				"pid",
				"b/PlotTFAPIDAirspeeds.m"
			],
			[
				"tria",
				"core/TrialPlot.m"
			],
			[
				"tuns",
				"b/PlotTFATurns.m"
			],
			[
				"plotdose",
				"b/PlotDoseResponses.m"
			],
			[
				"file",
				"b/FileName2GenoDate.m"
			],
			[
				"oval",
				"core/oval.m"
			],
			[
				"anlysepi",
				"b/AnalysePIDMultiPuffs.m"
			],
			[
				"analysepid",
				"b/AnalysePIDMultiPuffs3.m"
			],
			[
				"analyseair",
				"b/AnalyseAirspeedsMultiPuffs.m"
			],
			[
				"plotres2",
				"b/PlotTFAResponses2.m"
			],
			[
				"plottr",
				"PlotTrialVariability.m"
			],
			[
				"plotdos",
				"PlotDoseResponses.m"
			],
			[
				"plottf",
				"PlotTFAResponses2.m"
			],
			[
				"plottri",
				"PlotTrialVariability.m"
			],
			[
				"",
				"TFAViewer2.m"
			],
			[
				"error",
				"/Users/sigbhu/Dropbox/code/b/PlotDoseResponses.m"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Dropbox/code/tracking/flytrack.sublime-project"
			],
			[
				"Kon",
				"~/Dropbox/code/Kontroller/Kontroller.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 215.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
